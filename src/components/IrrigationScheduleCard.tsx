import {
  Droplets,
  Calendar,
  Clock,
  Bell,
  Info,
  ChevronLeft,
  ChevronRight,
  Plus,
  X,
  Check,
  AlertTriangle,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { useLanguage } from "./LanguageProvider";
import { useState, useEffect } from "react";
import { cn } from "@/lib/utils";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";

interface IrrigationEvent {
  day: number;
  stage: string;
  amount: number;
  method: string;
  priority: "high" | "medium" | "low";
  completed?: boolean;
}

export function IrrigationScheduleCard() {
  const { t } = useLanguage();
  const { toast } = useToast();
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [isAddEventOpen, setIsAddEventOpen] = useState(false);
  const [newEvent, setNewEvent] = useState<Partial<IrrigationEvent>>({
    day: 1,
    stage: "",
    amount: 0,
    method: "",
    priority: "medium",
  });

  const daysInMonth = new Date(
    currentMonth.getFullYear(),
    currentMonth.getMonth() + 1,
    0
  ).getDate();
  const firstDayOfMonth = new Date(
    currentMonth.getFullYear(),
    currentMonth.getMonth(),
    1
  ).getDay();

  const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);
  const emptyDays = Array.from({ length: firstDayOfMonth }, (_, i) => i);

  const getIrrigationForDay = (day: number) => {
    return irrigationSchedule.find((event) => event.day === day);
  };

  const nextMonth = () => {
    setCurrentMonth(
      new Date(currentMonth.setMonth(currentMonth.getMonth() + 1))
    );
  };

  const prevMonth = () => {
    setCurrentMonth(
      new Date(currentMonth.setMonth(currentMonth.getMonth() - 1))
    );
  };

  // Mock irrigation schedule - in real app, this would be generated by ML model
  const [irrigationSchedule, setIrrigationSchedule] = useState<
    IrrigationEvent[]
  >([
    {
      day: 0,
      stage: "Pre-sowing",
      amount: 50,
      method: "Flood irrigation",
      priority: "high",
      completed: false,
    },
    {
      day: 15,
      stage: "Germination",
      amount: 25,
      method: "Sprinkler",
      priority: "high",
      completed: false,
    },
    {
      day: 30,
      stage: "Vegetative",
      amount: 35,
      method: "Drip irrigation",
      priority: "medium",
      completed: false,
    },
    {
      day: 45,
      stage: "Flowering",
      amount: 40,
      method: "Drip irrigation",
      priority: "high",
      completed: false,
    },
    {
      day: 60,
      stage: "Grain filling",
      amount: 45,
      method: "Drip irrigation",
      priority: "high",
      completed: false,
    },
    {
      day: 75,
      stage: "Maturity",
      amount: 20,
      method: "Light sprinkler",
      priority: "low",
      completed: false,
    },
  ]);

  const totalWater = irrigationSchedule.reduce(
    (sum, event) => sum + event.amount,
    0
  );

  const toggleNotifications = () => {
    const newState = !notificationsEnabled;
    setNotificationsEnabled(newState);
    toast({
      title: newState ? "Notifications Enabled" : "Notifications Disabled",
      description: newState
        ? "You will receive alerts for upcoming irrigation events."
        : "You will no longer receive irrigation alerts.",
      duration: 3000,
    });
  };

  const addNewEvent = () => {
    if (
      newEvent.stage &&
      newEvent.method &&
      newEvent.amount &&
      newEvent.day !== undefined
    ) {
      setIrrigationSchedule([
        ...irrigationSchedule,
        {
          day: newEvent.day,
          stage: newEvent.stage,
          amount: newEvent.amount,
          method: newEvent.method,
          priority: newEvent.priority as "high" | "medium" | "low",
          completed: false,
        },
      ]);
      setIsAddEventOpen(false);
      setNewEvent({
        day: 1,
        stage: "",
        amount: 0,
        method: "",
        priority: "medium",
      });
      toast({
        title: "Event Added",
        description: `New irrigation event added for day ${newEvent.day}`,
      });
    }
  };

  const removeEvent = (index: number) => {
    const newSchedule = [...irrigationSchedule];
    newSchedule.splice(index, 1);
    setIrrigationSchedule(newSchedule);
    toast({
      title: "Event Removed",
      description: "Irrigation event has been removed from schedule",
    });
  };

  const toggleEventCompletion = (index: number) => {
    const newSchedule = [...irrigationSchedule];
    newSchedule[index].completed = !newSchedule[index].completed;
    setIrrigationSchedule(newSchedule);

    if (newSchedule[index].completed) {
      toast({
        title: "Task Completed",
        description: `${newSchedule[index].stage} irrigation task marked as complete`,
        duration: 3000,
      });
    }
  };

  useEffect(() => {
    if (notificationsEnabled) {
      // Delay notification to avoid overwhelming the user with multiple toasts at once
      const timer = setTimeout(() => {
        const nextEvent = irrigationSchedule.find(
          (event) => event.day > 0 && !event.completed
        );
        if (nextEvent) {
          toast({
            title: `Upcoming Irrigation Event`,
            description: `${nextEvent.stage} stage requires ${nextEvent.amount}mm water on Day ${nextEvent.day}`,
            duration: 4000,
          });
        }
      }, 1000);

      return () => clearTimeout(timer);
    }
  }, [notificationsEnabled, irrigationSchedule]);

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-500";
      case "medium":
        return "bg-yellow-500";
      case "low":
        return "bg-green-500";
      default:
        return "bg-gray-500";
    }
  };

  const getPriorityVariant = (priority: string) => {
    switch (priority) {
      case "high":
        return "destructive";
      case "medium":
        return "secondary";
      case "low":
        return "default";
      default:
        return "outline";
    }
  };

  return (
    <Card className="shadow-card transition-all duration-300 ease-in-out hover:shadow-lg">
      <CardHeader className="py-3 px-4">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-base">
            <Droplets className="h-4 w-4 text-accent" />
            {t("irrigationSchedule")}
          </CardTitle>
          <Button
            variant={notificationsEnabled ? "secondary" : "outline"}
            size="sm"
            onClick={toggleNotifications}
            className="flex items-center gap-1 h-7 px-2 text-xs transition-all duration-200 ease-in-out hover:scale-105"
          >
            <Bell className="h-3 w-3" />
            {notificationsEnabled ? "Enabled" : "Disabled"}
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-3 px-4 py-2">
        {/* Total Water Requirement */}
        <div className="flex items-center gap-2 p-2 rounded-lg bg-accent/10 border border-accent/20 transition-all duration-300 ease-in-out hover:bg-accent/20">
          <Droplets className="h-4 w-4 text-accent" />
          <div>
            <p className="text-xs text-muted-foreground transition-opacity duration-300 hover:opacity-80">
              Total Water Requirement
            </p>
            <p className="text-sm font-bold text-accent transition-all duration-300 hover:scale-105">
              {totalWater} mm/season
            </p>
          </div>
        </div>

        {/* Calendar View */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h4 className="font-medium text-xs text-muted-foreground flex items-center gap-1">
              <Calendar className="h-3 w-3" />
              Irrigation Calendar
            </h4>
            <div className="flex items-center gap-1">
              <Button variant="outline" size="icon" onClick={prevMonth} className="h-6 w-6 transition-transform duration-200 ease-in-out hover:scale-110 active:scale-95">
                <ChevronLeft className="h-3 w-3" />
              </Button>
              <span className="text-xs font-medium">
                {currentMonth.toLocaleString("default", {
                  month: "long",
                  year: "numeric",
                })}
              </span>
              <Button variant="outline" size="icon" onClick={nextMonth} className="h-6 w-6 transition-transform duration-200 ease-in-out hover:scale-110 active:scale-95">
                <ChevronRight className="h-3 w-3" />
              </Button>
            </div>
          </div>

          <div className="grid grid-cols-7 gap-0.5 text-center text-xs">
            {["S", "M", "T", "W", "Th", "F", "Sa"].map((day, index) => (
              <div key={`day-${index}`} className="py-1 text-muted-foreground font-medium">
                {day}
              </div>
            ))}
          </div>

          <div className="grid grid-cols-7 gap-0.5">
            {emptyDays.map((_, index) => (
              <div key={`empty-${index}`} className="h-8 p-0.5" />
            ))}
            {days.map((day) => {
              const event = getIrrigationForDay(day);
              return (
                <div
                  key={day}
                  className={cn(
                    "h-12 p-0.5 relative rounded-md border cursor-pointer hover:bg-muted/30 transition-all duration-200 ease-in-out",
                    day === newEvent.day && isAddEventOpen
                      ? "bg-primary/20 border-primary ring-1 ring-primary ring-offset-1"
                      : "",
                    event
                      ? event.completed
                        ? "bg-green-100 dark:bg-green-900/30 border-green-500"
                        : "bg-accent/10 border-accent"
                      : "border-border"
                  )}
                  onClick={() => {
                    setNewEvent((prev) => ({ ...prev, day }));
                    setIsAddEventOpen(true);
                  }}
                >
                  <span
                    className={cn(
                      "text-xs absolute top-0.5 left-1 font-medium",
                      day === newEvent.day && isAddEventOpen
                        ? "font-bold text-primary"
                        : ""
                    )}
                  >
                    {day}
                  </span>
                  {event && (
                    <div className="absolute bottom-0.5 left-0.5 right-0.5 top-5">
                      <div
                        className={cn(
                          "text-[0.65rem] rounded px-0.5 truncate h-full flex items-center justify-center transition-colors duration-200",
                          event.completed
                            ? "bg-green-200 dark:bg-green-900/50 dark:text-green-100"
                            : "bg-accent/20 dark:bg-accent/30"
                        )}
                      >
                        {event.amount}mm
                        {event.completed && (
                          <Check className="h-2 w-2 inline ml-0.5" />
                        )}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>

          <div className="flex justify-end">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsAddEventOpen(true)}
              className="flex items-center gap-1 h-7 px-2 text-xs transition-all duration-200 ease-in-out hover:bg-primary hover:text-primary-foreground"
            >
              <Plus className="h-3 w-3" />
              Add Event
            </Button>
          </div>
        </div>

        {/* Schedule Timeline */}
        <div className="space-y-2">
          <h4 className="font-medium text-xs text-muted-foreground flex items-center gap-1">
            <Calendar className="h-3 w-3" />
            Irrigation Timeline
          </h4>

          <div className="space-y-2">
            {irrigationSchedule.map((event, index) => (
              <div key={index} className="relative">
                {/* Timeline line */}
                {index < irrigationSchedule.length - 1 && (
                  <div className="absolute left-3 top-6 w-0.5 h-6 bg-border"></div>
                )}

                <div
                  className={cn(
                    "flex items-start gap-2 p-2 rounded-md transition-all duration-300 ease-in-out transform hover:scale-[1.01]",
                    event.completed
                      ? "bg-green-50 dark:bg-green-900/20"
                      : "bg-muted/30 hover:bg-muted/50 dark:hover:bg-muted/20"
                  )}
                >
                  {/* Checkbox */}
                  <div className="mt-0.5">
                    <Checkbox
                      checked={event.completed}
                      onCheckedChange={() => toggleEventCompletion(index)}
                      className="data-[state=checked]:bg-green-500 h-3 w-3 transition-all duration-300 ease-bounce hover:scale-125"
                    />
                  </div>

                  {/* Timeline dot */}
                  <div
                    className={`w-6 h-6 rounded-full ${getPriorityColor(
                      event.priority
                    )} flex items-center justify-center flex-shrink-0 transition-all duration-300 ease-in-out hover:scale-110`}
                  >
                    <Clock className="h-3 w-3 text-white transition-transform hover:rotate-12" />
                  </div>

                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between mb-0.5">
                      <div className="flex items-center gap-1">
                        <span
                          className={cn(
                            "font-medium text-xs",
                            event.completed &&
                              "line-through text-muted-foreground"
                          )}
                        >
                          Day {event.day}
                        </span>
                        <Badge
                          variant={getPriorityVariant(event.priority)}
                          className="text-[0.65rem] px-1 py-0 h-4 transition-all duration-300 ease-in-out hover:scale-110"
                        >
                          {event.priority}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-1">
                        <span className="font-bold text-xs text-accent">
                          {event.amount} mm
                        </span>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-5 w-5 text-muted-foreground hover:text-destructive"
                          onClick={() => removeEvent(index)}
                        >
                          <X className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>

                    <p
                      className={cn(
                        "text-xs text-muted-foreground mb-0.5",
                        event.completed && "line-through"
                      )}
                    >
                      {event.stage}
                    </p>
                    <p className="text-[0.65rem] text-muted-foreground">
                      {event.method}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Water Management - Made more compact */}
        <div className="p-2 rounded-md bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 shadow-sm">
          <h5 className="font-medium text-sm text-blue-700 dark:text-blue-400 mb-1.5 flex items-center gap-1">
            <AlertTriangle className="h-3.5 w-3.5" />
            Water Management Recommendations
          </h5>
          <ul className="text-xs text-blue-800 dark:text-blue-300 space-y-1">
            <li className="flex items-start gap-1.5">
              <div className="rounded-full bg-blue-200 dark:bg-blue-800 p-0.5 mt-0.5 transition-all duration-300 ease-in-out hover:scale-125">
                <Droplets className="h-2 w-2 text-blue-700 dark:text-blue-300" />
              </div>
              Apply water directly to the root zone to minimize waste
            </li>
            <li className="flex items-start gap-1.5">
              <div className="rounded-full bg-blue-200 dark:bg-blue-800 p-0.5 mt-0.5 transition-all duration-300 ease-in-out hover:scale-125">
                <Droplets className="h-2 w-2 text-blue-700 dark:text-blue-300" />
              </div>
              Reduce irrigation frequency but increase volume during flowering
            </li>
            <li className="flex items-start gap-1.5">
              <div className="rounded-full bg-blue-200 dark:bg-blue-800 p-0.5 mt-0.5 transition-all duration-300 ease-in-out hover:scale-125">
                <Droplets className="h-2 w-2 text-blue-700 dark:text-blue-300" />
              </div>
              Implement deficit irrigation during less critical growth stages
            </li>
            <li className="flex items-start gap-1.5">
              <div className="rounded-full bg-blue-200 dark:bg-blue-800 p-0.5 mt-0.5 transition-all duration-300 ease-in-out hover:scale-125">
                <Droplets className="h-2 w-2 text-blue-700 dark:text-blue-300" />
              </div>
              Use soil moisture sensors to optimize irrigation timing
            </li>
            <li className="flex items-start gap-1.5">
              <div className="rounded-full bg-blue-200 dark:bg-blue-800 p-0.5 mt-0.5 transition-all duration-300 ease-in-out hover:scale-125">
                <Droplets className="h-2 w-2 text-blue-700 dark:text-blue-300" />
              </div>
              Collect rainwater when possible to supplement irrigation needs
            </li>
          </ul>
        </div>

        {/* Tips Section */}
        <div className="p-2 rounded-md bg-primary/5 border border-primary/10 transition-all duration-300 ease-in-out hover:bg-primary/10 hover:border-primary/20">
          <h5 className="font-medium text-xs text-primary mb-1 flex items-center gap-1">
            <Info className="h-3 w-3" />
            Irrigation Tips
          </h5>
          <ul className="text-[0.65rem] text-muted-foreground space-y-0.5">
            <li className="transition-all duration-200 ease-in-out hover:translate-x-1 hover:text-primary">• Check soil moisture before each irrigation</li>
            <li className="transition-all duration-200 ease-in-out hover:translate-x-1 hover:text-primary">• Adjust schedule based on rainfall</li>
            <li className="transition-all duration-200 ease-in-out hover:translate-x-1 hover:text-primary">• Use mulching to reduce water evaporation</li>
            <li className="transition-all duration-200 ease-in-out hover:translate-x-1 hover:text-primary">• Monitor plant stress indicators</li>
          </ul>
        </div>
      </CardContent>

      {/* Add Event Dialog */}
      <Dialog open={isAddEventOpen} onOpenChange={setIsAddEventOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add Irrigation Event</DialogTitle>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Day</label>
              <Input
                type="number"
                value={newEvent.day}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, day: parseInt(e.target.value) })
                }
                className="col-span-3"
                min="1"
                max="31"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Stage</label>
              <Input
                value={newEvent.stage}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, stage: e.target.value })
                }
                className="col-span-3"
                placeholder="e.g. Flowering"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Amount (mm)</label>
              <Input
                type="number"
                value={newEvent.amount}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, amount: parseInt(e.target.value) })
                }
                className="col-span-3"
                min="1"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Method</label>
              <Input
                value={newEvent.method}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, method: e.target.value })
                }
                className="col-span-3"
                placeholder="e.g. Drip irrigation"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Priority</label>
              <select
                value={newEvent.priority}
                onChange={(e) =>
                  setNewEvent({
                    ...newEvent,
                    priority: e.target.value as "high" | "medium" | "low",
                  })
                }
                className="col-span-3 flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              >
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddEventOpen(false)}>
              Cancel
            </Button>
            <Button onClick={addNewEvent}>Add Event</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
}
