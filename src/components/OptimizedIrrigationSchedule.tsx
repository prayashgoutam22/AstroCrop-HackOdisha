import { useState, useEffect } from "react";
import { Bell } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { useLanguage } from "./LanguageProvider";
import { IrrigationCalendarCard } from "./IrrigationCalendarCard";
import { IrrigationTimelineCard } from "./IrrigationTimelineCard";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";

interface IrrigationEvent {
  day: number;
  stage: string;
  amount: number;
  method: string;
  priority: "high" | "medium" | "low";
  completed?: boolean;
}

export function OptimizedIrrigationSchedule() {
  const { t } = useLanguage();
  const { toast } = useToast();
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);
  const [isAddEventOpen, setIsAddEventOpen] = useState(false);
  const [newEvent, setNewEvent] = useState<Partial<IrrigationEvent>>({
    day: 1,
    stage: "",
    amount: 0,
    method: "",
    priority: "medium",
  });

  // Mock irrigation schedule - in real app, this would be generated by ML model
  const [irrigationSchedule, setIrrigationSchedule] = useState<IrrigationEvent[]>([
    {
      day: 0,
      stage: "Pre-sowing",
      amount: 50,
      method: "Flood irrigation",
      priority: "high",
      completed: false,
    },
    {
      day: 15,
      stage: "Germination",
      amount: 25,
      method: "Sprinkler",
      priority: "high",
      completed: false,
    },
    {
      day: 30,
      stage: "Vegetative",
      amount: 35,
      method: "Drip irrigation",
      priority: "medium",
      completed: false,
    },
    {
      day: 45,
      stage: "Flowering",
      amount: 40,
      method: "Drip irrigation",
      priority: "high",
      completed: false,
    },
    {
      day: 60,
      stage: "Grain filling",
      amount: 45,
      method: "Drip irrigation",
      priority: "high",
      completed: false,
    },
    {
      day: 75,
      stage: "Maturity",
      amount: 20,
      method: "Light sprinkler",
      priority: "low",
      completed: false,
    },
  ]);

  const totalWater = irrigationSchedule.reduce(
    (sum, event) => sum + event.amount,
    0
  );

  const toggleNotifications = () => {
    const newState = !notificationsEnabled;
    setNotificationsEnabled(newState);
    toast({
      title: newState ? "Notifications Enabled" : "Notifications Disabled",
      description: newState
        ? "You will receive alerts for upcoming irrigation events."
        : "You will no longer receive irrigation alerts.",
      duration: 3000,
    });
  };

  const handleAddEvent = (day: number) => {
    setNewEvent((prev) => ({ ...prev, day }));
    setIsAddEventOpen(true);
  };

  const handleEventClick = (day: number) => {
    // Handle clicking on existing events if needed
  };

  const addNewEvent = () => {
    if (
      newEvent.stage &&
      newEvent.method &&
      newEvent.amount &&
      newEvent.day !== undefined
    ) {
      setIrrigationSchedule([
        ...irrigationSchedule,
        {
          day: newEvent.day,
          stage: newEvent.stage,
          amount: newEvent.amount,
          method: newEvent.method,
          priority: newEvent.priority as "high" | "medium" | "low",
          completed: false,
        },
      ]);
      setIsAddEventOpen(false);
      setNewEvent({
        day: 1,
        stage: "",
        amount: 0,
        method: "",
        priority: "medium",
      });
      toast({
        title: "Event Added",
        description: `New irrigation event added for day ${newEvent.day}`,
      });
    }
  };

  const removeEvent = (index: number) => {
    const newSchedule = [...irrigationSchedule];
    newSchedule.splice(index, 1);
    setIrrigationSchedule(newSchedule);
    toast({
      title: "Event Removed",
      description: "Irrigation event has been removed from schedule",
    });
  };

  const toggleEventCompletion = (index: number) => {
    const newSchedule = [...irrigationSchedule];
    newSchedule[index].completed = !newSchedule[index].completed;
    setIrrigationSchedule(newSchedule);

    if (newSchedule[index].completed) {
      toast({
        title: "Task Completed",
        description: `${newSchedule[index].stage} irrigation task marked as complete`,
        duration: 3000,
      });
    }
  };

  useEffect(() => {
    if (notificationsEnabled) {
      const timer = setTimeout(() => {
        const nextEvent = irrigationSchedule.find(
          (event) => event.day > 0 && !event.completed
        );
        if (nextEvent) {
          toast({
            title: `Upcoming Irrigation Event`,
            description: `${nextEvent.stage} stage requires ${nextEvent.amount}mm water on Day ${nextEvent.day}`,
            duration: 4000,
          });
        }
      }, 1000);

      return () => clearTimeout(timer);
    }
  }, [notificationsEnabled, irrigationSchedule]);

  return (
    <div className="space-y-3 md:space-y-4">
      {/* Header with Notifications */}
      <div className="flex items-center justify-between">
        <h2 className="text-xl md:text-2xl font-bold text-foreground">Irrigation Management</h2>
        <Button
          variant={notificationsEnabled ? "secondary" : "outline"}
          size="sm"
          onClick={toggleNotifications}
          className="flex items-center gap-2"
        >
          <Bell className="h-4 w-4" />
          <span className="hidden sm:inline">
            {notificationsEnabled ? "Notifications On" : "Notifications Off"}
          </span>
          <span className="sm:hidden">
            {notificationsEnabled ? "On" : "Off"}
          </span>
        </Button>
      </div>

      {/* Side by Side Layout - Responsive */}
      <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 md:gap-6">
        {/* Calendar Card */}
        <div className="h-full min-h-[400px] md:min-h-[500px]">
          <IrrigationCalendarCard
            irrigationSchedule={irrigationSchedule}
            onAddEvent={handleAddEvent}
            onEventClick={handleEventClick}
            newEventDay={newEvent.day}
            isAddEventOpen={isAddEventOpen}
          />
        </div>

        {/* Timeline Card */}
        <div className="h-full min-h-[400px] md:min-h-[500px]">
          <IrrigationTimelineCard
            irrigationSchedule={irrigationSchedule}
            totalWater={totalWater}
            onToggleCompletion={toggleEventCompletion}
            onRemoveEvent={removeEvent}
          />
        </div>
      </div>

      {/* Add Event Dialog */}
      <Dialog open={isAddEventOpen} onOpenChange={setIsAddEventOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add Irrigation Event</DialogTitle>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Day</label>
              <Input
                type="number"
                value={newEvent.day}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, day: parseInt(e.target.value) })
                }
                className="col-span-3"
                min="1"
                max="31"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Stage</label>
              <Input
                value={newEvent.stage}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, stage: e.target.value })
                }
                className="col-span-3"
                placeholder="e.g. Flowering"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Amount (mm)</label>
              <Input
                type="number"
                value={newEvent.amount}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, amount: parseInt(e.target.value) })
                }
                className="col-span-3"
                min="1"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Method</label>
              <Input
                value={newEvent.method}
                onChange={(e) =>
                  setNewEvent({ ...newEvent, method: e.target.value })
                }
                className="col-span-3"
                placeholder="e.g. Drip irrigation"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <label className="text-right text-sm">Priority</label>
              <select
                value={newEvent.priority}
                onChange={(e) =>
                  setNewEvent({
                    ...newEvent,
                    priority: e.target.value as "high" | "medium" | "low",
                  })
                }
                className="col-span-3 flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              >
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddEventOpen(false)}>
              Cancel
            </Button>
            <Button onClick={addNewEvent}>Add Event</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
