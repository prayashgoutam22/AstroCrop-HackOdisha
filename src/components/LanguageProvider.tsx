import { createContext, useContext, useState, ReactNode } from "react";

export type Language = "en" | "hi";

export const translations = {
  en: {
    // Navigation
    dashboard: "Dashboard",
    yieldPredictor: "Yield Predictor",
    yieldCalculator: "Yield Calculator",
    weatherForecast: "Weather Forecast",
    soilAnalysis: "Soil Analysis",
    cropDiseaseDetection: "Crop Disease Detection",
    chatBot: "FasalGPT",
    agriAssistant: "FasalGPT",

    // Common
    location: "Location",
    selectLocation: "Select Location",
    state: "State",
    district: "District",
    city: "City",
    cropType: "Crop Type",
    selectCrop: "Select Crop",
    soilPH: "Soil pH",
    nitrogen: "Nitrogen (N)",
    phosphorus: "Phosphorus (P)",
    potassium: "Potassium (K)",
    area: "Area",
    temperature: "Temperature",
    humidity: "Humidity",
    rainfall: "Rainfall",
    calculate: "Calculate",
    predict: "Predict",
    analyze: "Analyze",
    upload: "Upload",
    camera: "Camera",
    takePhoto: "Take Photo",
    browseFiles: "Browse Files",
    removeImage: "Remove Image",
    cancel: "Cancel",
    capture: "Capture",
    openCamera: "Open Camera",
    analyzing: "Analyzing...",
    online: "Online",
    offline: "Offline",

    // Dashboard
    welcomeMessage: "ЁЯМ╛ Welcome to AstroCrop!",
    currentWeather: "Current Weather",
    yieldPrediction: "Yield Prediction",
    fertilizerRecommendation: "Fertilizer Recommendation",
    irrigationSchedule: "Irrigation Schedule",

    // Yield Calculator
    expectedYield: "Expected Yield",
    fertilizerAmount: "Fertilizer Amount",
    irrigationFrequency: "Irrigation Frequency",
    predictedYield: "Predicted Yield",
    totalYield: "Total Yield",
    confidence: "Confidence",
    recommendation: "Recommendation",

    // Units
    kgPerHectare: "kg/hectare",
    hectare: "hectare",
    celsius: "┬░C",
    percentage: "%",
    mm: "mm",
    days: "days",
    ppm: "ppm",
    kmh: "km/h",
    windSpeed: "Wind Speed",

    // Application Timing
    basalApplication: "Basal application: 50% at sowing",
    firstTopDressing: "First top dressing: 25% at 30 days",
    secondTopDressing: "Second top dressing: 25% at 60 days",

    // Weather Conditions
    partlyCloudy: "Partly Cloudy",
    clear: "Clear",
    cloudy: "Cloudy",
    lightRain: "Light Rain",
    locationNotSet: "Location not set",
    sevenDayForecast: "7-Day Forecast",
    lastUpdated: "Last updated",

    // Soil Analysis
    nutrients: "Nutrients",
    physical: "Physical",
    biological: "Biological",
    optimal: "Optimal",
    low: "Low",
    high: "High",
    critical: "Critical",
    nextSampling: "Next Sampling",
    sampleDepth: "Sample Depth",
    samplingMethod: "Sampling Method",
    recommendations: "Recommendations",
    historicalData: "Historical Data",
    download: "Download",

    // Disease Detection
    uploadImage: "Upload Image",
    detectionResults: "Detection Results",
    symptoms: "Symptoms",
    treatment: "Treatment",
    prevention: "Prevention",
    favorableConditions: "Favorable Conditions",
    spreadRate: "Spread Rate",
    viewDetailedReport: "View Detailed Report",
    startNewDetection: "Start New Detection",
    tipsForBetterDetection: "Tips for better detection",
    ensureGoodLighting: "Ensure good lighting conditions",
    focusOnAffectedParts: "Focus on affected plant parts",
    includeHealthyAndDiseased:
      "Include both healthy and diseased tissue for comparison",
    takeMultipleImages: "Take multiple images from different angles",

    // Fertilizer
    npkRequirements: "NPK Requirements",
    recommendedProducts: "Recommended Products",
    applicationSchedule: "Application Schedule",
    amount: "Amount",
    warnings: "Warnings",
    next: "Next",
    soilPh: "Soil pH",
    organicMatter: "Organic Matter",
    applicationNotes: "Application Notes",

    // Chat Bot
    agriAssistant: "FasalGPT",
    askAboutCrops: "Ask about crops, weather, fertilizers...",
    botIsTyping: "Bot is typing...",
    quickQuestions: "Quick questions",
    continueConversation: "Continue the conversation",
    relatedTopics: "Related topics",
    riceCultivationGuide: "Rice cultivation guide",
    wheatFertilizerSchedule: "Wheat fertilizer schedule",
    soilPhManagement: "Soil pH management",
    pestControlForCrops: "Pest control for crops",
    irrigationTiming: "Irrigation timing",
    yieldPredictionMethods: "Yield prediction methods",

    // Location
    gettingLocation: "Getting location...",
    locationError: "Location error",
    locationActive: "Location active",
    noLocationSet: "No location set",
  },
  hi: {
    // Navigation - Hindi
    dashboard: "рдбреИрд╢рдмреЛрд░реНрдб",
    yieldPredictor: "рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
    yieldCalculator: "рдЙрддреНрдкрд╛рджрди рдХреИрд▓рдХреБрд▓реЗрдЯрд░",
    weatherForecast: "рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
    soilAnalysis: "рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
    cropDiseaseDetection: "рдлрд╕рд▓ рд░реЛрдЧ рдкрд╣рдЪрд╛рди",
    chatBot: "рдлрд╕рд▓GPT",

    // Common - Hindi
    location: "рд╕реНрдерд╛рди",
    selectLocation: "рд╕реНрдерд╛рди рдЪреБрдиреЗрдВ",
    state: "рд░рд╛рдЬреНрдп",
    district: "рдЬрд┐рд▓рд╛",
    city: "рд╢рд╣рд░",
    cropType: "рдлрд╕рд▓ рдХрд╛ рдкреНрд░рдХрд╛рд░",
    selectCrop: "рдлрд╕рд▓ рдЪреБрдиреЗрдВ",
    soilPH: "рдорд┐рдЯреНрдЯреА рдХрд╛ pH",
    nitrogen: "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N)",
    phosphorus: "рдлрд╛рд╕реНрдлреЛрд░рд╕ (P)",
    potassium: "рдкреЛрдЯреЗрд╢рд┐рдпрдо (K)",
    area: "рдХреНрд╖реЗрддреНрд░рдлрд▓",
    temperature: "рддрд╛рдкрдорд╛рди",
    humidity: "рдЖрд░реНрджреНрд░рддрд╛",
    rainfall: "рд╡рд░реНрд╖рд╛",
    calculate: "рдЧрдгрдирд╛ рдХрд░реЗрдВ",
    predict: "рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░реЗрдВ",
    analyze: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
    upload: "рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
    camera: "рдХреИрдорд░рд╛",
    takePhoto: "рдлреЛрдЯреЛ рд▓реЗрдВ",
    browseFiles: "рдлрд╛рдЗрд▓реЗрдВ рдмреНрд░рд╛рдЙрдЬрд╝ рдХрд░реЗрдВ",
    removeImage: "рдЫрд╡рд┐ рд╣рдЯрд╛рдПрдВ",
    cancel: "рд░рджреНрдж рдХрд░реЗрдВ",
    capture: "рдХреИрдкреНрдЪрд░ рдХрд░реЗрдВ",
    openCamera: "рдХреИрдорд░рд╛ рдЦреЛрд▓реЗрдВ",
    analyzing: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    online: "рдСрдирд▓рд╛рдЗрди",
    offline: "рдСрдлрд▓рд╛рдЗрди",

    // Dashboard - Hindi
    welcomeMessage: "ЁЯМ╛ AstroCrop рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
    currentWeather: "рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо",
    yieldPrediction: "рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
    fertilizerRecommendation: "рдЙрд░реНрд╡рд░рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢",
    irrigationSchedule: "рд╕рд┐рдВрдЪрд╛рдИ рдЕрдиреБрд╕реВрдЪреА",

    // Yield Calculator - Hindi
    expectedYield: "рдЕрдкреЗрдХреНрд╖рд┐рдд рдЙрддреНрдкрд╛рджрди",
    fertilizerAmount: "рдЙрд░реНрд╡рд░рдХ рдХреА рдорд╛рддреНрд░рд╛",
    irrigationFrequency: "рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдЖрд╡реГрддреНрддрд┐",
    predictedYield: "рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рдирд┐рдд рдЙрддреНрдкрд╛рджрди",
    totalYield: "рдХреБрд▓ рдЙрддреНрдкрд╛рджрди",
    confidence: "рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛",
    recommendation: "рд╕рд┐рдлрд╛рд░рд┐рд╢",

    // Units - Hindi
    kgPerHectare: "рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░",
    hectare: "рд╣реЗрдХреНрдЯреЗрдпрд░",
    celsius: "┬░C",
    percentage: "%",
    mm: "рдорд┐рдореА",
    days: "рджрд┐рди",
    ppm: "рдкреАрдкреАрдПрдо",
    kmh: "рдХрд┐рдореА/рдШрдВрдЯрд╛",
    windSpeed: "рд╣рд╡рд╛ рдХреА рдЧрддрд┐",

    // Application Timing - Hindi
    basalApplication: "рдЖрдзрд╛рд░рд┐рдХ рдЕрдиреБрдкреНрд░рдпреЛрдЧ: рдмреБрд╡рд╛рдИ рдкрд░ 50%",
    firstTopDressing: "рдкрд╣рд▓реА рд╢реАрд░реНрд╖ рдбреНрд░реЗрд╕рд┐рдВрдЧ: 30 рджрд┐рди рдкрд░ 25%",
    secondTopDressing: "рджреВрд╕рд░реА рд╢реАрд░реНрд╖ рдбреНрд░реЗрд╕рд┐рдВрдЧ: 60 рджрд┐рди рдкрд░ 25%",

    // Weather Conditions - Hindi
    partlyCloudy: "рдЖрдВрд╢рд┐рдХ рд░реВрдк рд╕реЗ рдмрд╛рджрд▓",
    clear: "рд╕рд╛рдл",
    cloudy: "рдмрд╛рджрд▓",
    lightRain: "рд╣рд▓реНрдХреА рдмрд╛рд░рд┐рд╢",
    locationNotSet: "рд╕реНрдерд╛рди рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ",
    sevenDayForecast: "7-рджрд┐рди рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
    lastUpdated: "рдЕрдВрддрд┐рдо рдЕрдкрдбреЗрдЯ",

    // Soil Analysis - Hindi
    nutrients: "рдкреЛрд╖рдХ рддрддреНрд╡",
    physical: "рднреМрддрд┐рдХ",
    biological: "рдЬреИрд╡рд┐рдХ",
    optimal: "рдЗрд╖реНрдЯрддрдо",
    low: "рдХрдо",
    high: "рдЙрдЪреНрдЪ",
    critical: "рдЧрдВрднреАрд░",
    nextSampling: "рдЕрдЧрд▓рд╛ рдирдореВрдирд╛",
    sampleDepth: "рдирдореВрдирд╛ рдЧрд╣рд░рд╛рдИ",
    samplingMethod: "рдирдореВрдирд╛ рд╡рд┐рдзрд┐",
    recommendations: "рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
    historicalData: "рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдбреЗрдЯрд╛",
    download: "рдбрд╛рдЙрдирд▓реЛрдб",

    // Disease Detection - Hindi
    uploadImage: "рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
    detectionResults: "рдкрд╣рдЪрд╛рди рдкрд░рд┐рдгрд╛рдо",
    symptoms: "рд▓рдХреНрд╖рдг",
    treatment: "рдЙрдкрдЪрд╛рд░",
    prevention: "рд░реЛрдХрдерд╛рдо",
    favorableConditions: "рдЕрдиреБрдХреВрд▓ рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпрд╛рдВ",
    spreadRate: "рдлреИрд▓рд╛рд╡ рджрд░",
    viewDetailedReport: "рд╡рд┐рд╕реНрддреГрдд рд░рд┐рдкреЛрд░реНрдЯ рджреЗрдЦреЗрдВ",
    startNewDetection: "рдирдИ рдкрд╣рдЪрд╛рди рд╢реБрд░реВ рдХрд░реЗрдВ",
    tipsForBetterDetection: "рдмреЗрд╣рддрд░ рдкрд╣рдЪрд╛рди рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡",
    ensureGoodLighting: "рдЕрдЪреНрдЫреА рд░реЛрд╢рдиреА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ",
    focusOnAffectedParts: "рдкреНрд░рднрд╛рд╡рд┐рдд рдкреМрдзреЗ рдХреЗ рд╣рд┐рд╕реНрд╕реЛрдВ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ",
    includeHealthyAndDiseased:
      "рддреБрд▓рдирд╛ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╕реНрде рдФрд░ рд░реЛрдЧрдЧреНрд░рд╕реНрдд рджреЛрдиреЛрдВ рдКрддрдХ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ",
    takeMultipleImages: "рд╡рд┐рднрд┐рдиреНрди рдХреЛрдгреЛрдВ рд╕реЗ рдХрдИ рдЫрд╡рд┐рдпрд╛рдВ рд▓реЗрдВ",

    // Fertilizer - Hindi
    npkRequirements: "NPK рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ",
    recommendedProducts: "рдЕрдиреБрд╢рдВрд╕рд┐рдд рдЙрддреНрдкрд╛рдж",
    applicationSchedule: "рдЕрдиреБрдкреНрд░рдпреЛрдЧ рдЕрдиреБрд╕реВрдЪреА",
    amount: "рдорд╛рддреНрд░рд╛",
    warnings: "рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдВ",
    next: "рдЕрдЧрд▓рд╛",
    soilPh: "рдорд┐рдЯреНрдЯреА рдХрд╛ pH",
    organicMatter: "рдХрд╛рд░реНрдмрдирд┐рдХ рдкрджрд╛рд░реНрде",
    applicationNotes: "рдЕрдиреБрдкреНрд░рдпреЛрдЧ рдиреЛрдЯреНрд╕",

    // Chat Bot - Hindi
    agriAssistant: "рдлрд╕рд▓GPT",
    askAboutCrops: "рдлрд╕рд▓реЛрдВ, рдореМрд╕рдо, рдЙрд░реНрд╡рд░рдХреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ...",
    botIsTyping: "рдмреЙрдЯ рдЯрд╛рдЗрдк рдХрд░ рд░рд╣рд╛ рд╣реИ...",
    quickQuestions: "рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди",
    continueConversation: "рдмрд╛рддрдЪреАрдд рдЬрд╛рд░реА рд░рдЦреЗрдВ",
    relatedTopics: "рд╕рдВрдмрдВрдзрд┐рдд рд╡рд┐рд╖рдп",
    riceCultivationGuide: "рдЪрд╛рд╡рд▓ рдХреА рдЦреЗрддреА рдЧрд╛рдЗрдб",
    wheatFertilizerSchedule: "рдЧреЗрд╣реВрдВ рдЙрд░реНрд╡рд░рдХ рдЕрдиреБрд╕реВрдЪреА",
    soilPhManagement: "рдорд┐рдЯреНрдЯреА pH рдкреНрд░рдмрдВрдзрди",
    pestControlForCrops: "рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг",
    irrigationTiming: "рд╕рд┐рдВрдЪрд╛рдИ рд╕рдордп",
    yieldPredictionMethods: "рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рд╡рд┐рдзрд┐рдпрд╛рдВ",

    // Location - Hindi
    gettingLocation: "рд╕реНрдерд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
    locationError: "рд╕реНрдерд╛рди рддреНрд░реБрдЯрд┐",
    locationActive: "рд╕реНрдерд╛рди рд╕рдХреНрд░рд┐рдп",
    noLocationSet: "рдХреЛрдИ рд╕реНрдерд╛рди рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ",
  },
};

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>(() => {
    // Get language from localStorage or default to 'en'
    const savedLanguage = localStorage.getItem(
      "crop-optima-language"
    ) as Language;
    return savedLanguage && translations[savedLanguage] ? savedLanguage : "en";
  });

  const t = (key: string): string => {
    const keys = key.split(".");
    let value: unknown = translations[language];

    for (const k of keys) {
      value = value?.[k];
    }

    // If translation not found in current language, try English as fallback
    if (!value && language !== "en") {
      value = translations.en;
      for (const k of keys) {
        value = value?.[k];
      }
    }

    return value || key;
  };

  const handleSetLanguage = (lang: Language) => {
    setLanguage(lang);
    localStorage.setItem("crop-optima-language", lang);
  };

  return (
    <LanguageContext.Provider
      value={{ language, setLanguage: handleSetLanguage, t }}
    >
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
}
